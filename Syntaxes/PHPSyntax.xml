<?xml version="1.0" encoding="UTF-8"?>
<syntax name="sourcecode.php">
	<zones>
		<!-- PHP Source Block; <?php ... ?> -->
		<zone name="container.block.php">
			<starts-with>
				<expression>^((&lt;)(\?)(php|=)?)</expression>
				<capture number="0" name="container.block.begin"/>
			</starts-with>
			<ends-with>
				<expression>(\?)></expression>
				<capture number="0" name="container.block.end"/>
				<capture number="1" name="source"/>
			</ends-with>
			<subzones>
				<include collection="language" />
			</subzones>
		</zone>
		<include syntax="text.html.basic" />
	</zones>
	
	<library>
	    <!-- Includes all other collections -->
	    <collection name="language">
	        <include collection="metadata.comment" />
	        <include collection="literal.keyword" />
	        <include collection="identifier.function" />
	        <include collection="identifier.class" />
	        <include collection="identifier.variable" />
	        <include collection="literal.string" />
	        <include collection="delimiter" />
	    </collection>
	    
	    
	    <!-- Metadata -->
	    <collection name="metadata.comment">
	        <!-- // comment -->
	        <zone name="metadata.comment.line.double-slash">
                <expression>(//)(.*?$\n?)</expression>
                <capture number="1" name="punctuation.definition.comment" />
	        </zone>
	        <!-- # comment -->
	        <zone name="metadata.comment.line.hash">
                <expression>(#)(.*?$\n?)</expression>
			    <capture number="1" name="punctuation.definition.comment" />
	        </zone>
	        <zone name="metadata.comment.documentation">
				<starts-with>
					<expression>(/\*\*)</expression>
					<capture number="1" name="punctuation.definition.comment"/>
				</starts-with>
				<ends-with>
					<expression>(\*/)</expression>
					<capture number="1" name="punctuation.definition.comment"/>
				</ends-with>
				<subzones>
				    <zone name="delimiter.separator.asterisk">
        		        <expression>(\*{1})</expression>
        		    </zone>
					<include collection="metadata.comment.phpDoc"/>
				</subzones>
			</zone>
			<zone name="metadata.comment.block">
				<starts-with>
					<expression>(/\*{2})</expression>
					<capture number="1" name="punctuation.definition.comment"/>
				</starts-with>
				<ends-with>
					<expression>(\*/)</expression>
					<capture number="1" name="punctuation.definition.comment"/>
				</ends-with>
			</zone>
	    </collection>
	    <!-- phpDoc -->
	    <collection name="metadata.comment.phpDoc">
	        <zone name="metadata.comment.documentation.phpDoc.invalid.illegal.missing-asterisk">
                <expression>^(?!\s*\*).*$\n?</expression>
	        </zone>
	        <zone>
				<expression>^\s*\*\s*(@access)\s+((public|private|protected)|(.+))\s*$</expression>
				<capture number="1" name="metadata.comment.phpDoc.keyword"/>
				<capture number="3" name="metadata.comment.phpDoc.storage.modifier"/>
				<capture number="4" name="metadata.comment.phpDoc.invalid.illegal.wrong-access-typedoc"/>
			</zone>
			<zone name="metadata.comment.phpDoc.markup.underline.link">
				<expression>((https?|s?ftp|ftps|file|smb|afp|nfs|(x-)?man|gopher|txmt)://|mailto:)[-:@a-zA-Z0-9_.~%+/?=&amp;#]+(?&lt;![.?:])</expression>
			</zone>
			<zone>
				<expression>(@xlink)\s+(.+)\s*$</expression>
				<capture number="1" name="metadata.comment.phpDoc.keyword"/>
				<capture number="2" name="metadata.comment.phpDoc.markup.underline.link"/>
			</zone>
			<zone name="metadata.comment.phpDoc.keyword">
				<expression>\@(a(bstract|uthor)|c(ategory|opyright)|example|global|internal|li(cense|nk)|pa(ckage|ram)|return|s(ee|ince|tatic|ubpackage)|t(hrows|odo)|v(ar|ersion)|uses|deprecated|final)\b</expression>
			</zone>
			<zone name="metadata.comment.phpDoc.meta.tag.inlinedoc">
				<expression>\{(@(link)).+?\}</expression>
				<capture number="1" name="keyword.otherdoc"/>
			</zone>
	    </collection>
	    
	    
	    <!-- Literals -->
	    
	    <collection name="literal.string">
            <zone name="literal.string.quoted.single">
                <starts-with>
                    <expression>'</expression>
                    <capture number="0" name="begin"/>
                </starts-with>
                <ends-with>
                    <expression>'</expression>
                    <capture number="0" name="end"/>
                </ends-with>
                <subzones>
                    <zone name="literal.escape.brief">
                        <!-- 'A single-quoted string with \'escape sequences\'' -->
                        <expression>(\\)('|\\)</expression>
                        <capture number="1" name="delimiter.seperator.escape"/>
                        <capture number="2" name="character"/>
                    </zone>
                </subzones>
            </zone>
            <zone name="literal.string.quoted.double">
                <starts-with>
                    <expression>"</expression>
                    <capture number="0" name="begin"/>
                </starts-with>
                <ends-with>
                    <expression>"</expression>
                    <capture number="0" name="end"/>
                </ends-with>
                <subzones>
                    <include collection="identifier.variable" />
                    <zone name="literal.escape.brief">
                        <!-- 'A single-quoted string with \'escape sequences\'' -->
                        <expression>(\\)("|\\)</expression>
                        <capture number="1" name="delimiter.seperator.escape"/>
                        <capture number="2" name="character"/>
                    </zone>
                </subzones>
            </zone>
	    </collection>
	    
		<collection name="literal.keyword">
		    <zone name="literal.keyword.bool.true">
		        <expression>\btrue\b</expression>
		    </zone>
		    <zone name="literal.keyword.bool.false">
		        <expression>\bfalse\b</expression>
		    </zone>
		    <zone name="literal.keyword.nothing.null">
		        <expression>\bnull\b</expression>
		    </zone>
			<zone name="literal.keyword.constant.keyword">
				<expression>(?i)\b(|__(FILE|FUNCTION|CLASS|METHOD|LINE)__|ON|OFF|YES|NO|NL|BR|TAB)\b</expression>
			</zone>
			
			<zone name="literal.keyword.constant.core">
				<expression>\b(DEFAULT_INCLUDE_PATH|E_(ALL|COMPILE_(ERROR|WARNING)|CORE_(ERROR|WARNING)|(RECOVERABLE_)?ERROR|NOTICE|PARSE|STRICT|USER_(ERROR|NOTICE|WARNING)|WARNING)|PEAR_(EXTENSION_DIR|INSTALL_DIR)|PHP_(BINDIR|CONFIG_FILE_PATH|DATADIR|E(OL|XTENSION_DIR)|L(IBDIR|OCALSTATEDIR)|O(S|UTPUT_HANDLER_CONT|UTPUT_HANDLER_END|UTPUT_HANDLER_START)|SYSCONFDIR|VERSION))\b</expression>
			</zone>
			
			<zone name="literal.keyword.constant.std">
				<expression>\b(A(B(DAY_([1-7])|MON_([0-9]{1,2}))|LT_DIGITS|M_STR|SSERT_(ACTIVE|BAIL|CALLBACK|QUIET_EVAL|WARNING))|C(ASE_(LOWER|UPPER)|HAR_MAX|O(DESET|NNECTION_(ABORTED|NORMAL|TIMEOUT)|UNT_(NORMAL|RECURSIVE))|REDITS_(ALL|DOCS|FULLPAGE|GENERAL|GROUP|MODULES|QA|SAPI)|RNCYSTR|RYPT_(BLOWFISH|EXT_DES|MD5|SALT_LENGTH|STD_DES)|URRENCY_SYMBOL)|D(AY_([1-7])|ECIMAL_POINT|IRECTORY_SEPARATOR|_(FMT|T_FMT))|E(NT_(COMPAT|NOQUOTES|QUOTES)|RA(|_D_FMT|_D_T_FMT|_T_FMT|_YEAR)|XTR_(IF_EXISTS|OVERWRITE|PREFIX_(ALL|IF_EXISTS|INVALID|SAME)|SKIP))|FRAC_DIGITS|GROUPING|HTML_(ENTITIES|SPECIALCHARS)|IN(FO_(ALL|CONFIGURATION|CREDITS|ENVIRONMENT|GENERAL|LICENSE|MODULES|VARIABLES)|I_(ALL|PERDIR|SYSTEM|USER)|T_(CURR_SYMBOL|FRAC_DIGITS))|L(C_(ALL|COLLATE|CTYPE|MESSAGES|MONETARY|NUMERIC|TIME)|O(CK_(EX|NB|SH|UN)|G_(ALERT|AUTH(|PRIV)|CONS|CRIT|CRON|DAEMON|DEBUG|EMERG|ERR|INFO|KERN|LOCAL([0-7])|LPR|MAIL|NDELAY|NEWS|NOTICE|NOWAIT|ODELAY|PERROR|PID|SYSLOG|USER|UUCP|WARNING)))|M(ON_([0-9]{1,2}|DECIMAL_POINT|GROUPING|THOUSANDS_SEP)|YSQL_(ASSOC|BOTH|NUM)|_(1_PI|2_(PI|SQRTPI)|E|L(N10|N2|OG(10E|2E))|PI(|_2|_4)|SQRT1_2|SQRT2))|N(EGATIVE_SIGN|O(EXPR|STR)|_(CS_PRECEDES|SEP_BY_SPACE|SIGN_POSN))|P(ATH(INFO_(BASENAME|DIRNAME|EXTENSION|FILENAME)|_SEPARATOR)|M_STR|OSITIVE_SIGN|_(CS_PRECEDES|SEP_BY_SPACE|SIGN_POSN))|RADIXCHAR|S(EEK_(CUR|END|SET)|ORT_(ASC|DESC|NUMERIC|REGULAR|STRING)|TR_PAD_(BOTH|LEFT|RIGHT))|T(HOUS(ANDS_SEP|EP)|_(FMT(|_AMPM)))|YES(EXPR|STR))\b</expression>
			</zone>
			
			<zone name="literal.keyword.constant.other">
				<expression>[a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*</expression>
			</zone>
		</collection>
		
		
		<!-- Identifiers -->
		
		<collection name="identifier.variable">
		    <zone name="identifier.variable.instance">
		        <expression>(?x)(\$+)this\b</expression>
		    </zone>
		    <zone name="identifier.variable.global">
		        <expression>(\$)(_(COOKIE|FILES|GET|POST|REQUEST))\b</expression>
		    </zone>
		    <zone name="identifier.variable.local">
		        <expression>(?x)(\$+)[a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*?\b</expression>
		    </zone>
		</collection>
		
		<collection name="identifier.function">
			<zone name="identifier.function">
				<expression>[A-Za-z_][A-Za-z_0-9]*(?=\s*\()</expression>
			</zone>
		</collection>
		
		<collection name="identifier.class">
			<zone name="identifier.class">
				<expression>(?i)\b(new)\s+(?:(\$[a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*)|(\w+))|(\w+)(?=::)</expression>
				<capture number="1" name="literal.keyword.new"/>
				<capture number="2" name="identifier.variable"/>
				<capture number="3" name="identifier.class.name"/>
				<capture number="4" name="identifier.class.static-method"/>
			</zone>
		</collection>
        
        <collection name="delimiter">
            <zone name="delimiter.terminator">
                <expression>\;</expression>
            </zone>
            <zone name="delimiter.separator.comma">
                <expression>,</expression>
            </zone>
            <zone name="delimiter.balanced.curly-brace.begin">
                <expression>\{</expression>
            </zone>
            <zone name="delimiter.balanced.curly-brace.end">
                <expression>\}</expression>
            </zone>
            <zone name="delimiter.balanced.parenthesis.begin">
                <expression>\(</expression>
            </zone>
            <zone name="delimiter.balanced.parenthesis.end">
                <expression>\)</expression>
            </zone>
            <zone name="delimiter.balanced.square-brace.begin">
                <expression>\[</expression>
            </zone>
            <zone name="delimiter.balanced.square-brace.end">
                <expression>\]</expression>
            </zone>
        </collection>
        
	</library>
</syntax>